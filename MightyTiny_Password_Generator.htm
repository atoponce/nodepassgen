<!doctype html>
<!-- Originaly written by Aaron Toponce https://github.com/atoponce/nodepassgen -->
<!-- Minimized, i.e. edited down to just the bare bones needed to create good passwords by H Johnson -->

<!-- Installation:  
  a) Locate this file on your hard disk.  
  b) Browse to it with a url like file:///YourActualPathToThisFile/MightyTiny_Password_Generator.htm
  c) Book mark it so it's easy to run again.
-->

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>MightyTiny Password Generator - v0.1</title>
  </head>

  <body onload="generate_random()">
    
    <h2>MightyTiny Password Generator</h2>


    <hr>
      <p>Don't let the primitive look of this gadget fool you. 
      Fancy screen formatting was deliberately left out of this version.</p>

      <p>This is built simple, so it's inner workings can be easily inspected.  
      With minimal technical skill, one can easily look inside and see exactly how it works.</p>

      <p>Open-source code + Simplicity = Trustworthness.</p>
    
      <p>The calculations are done inside your web browser and never touch the internet, 
      not until you hand copy your new generated password to it's target web page.</p>

      <p><b>Be safe:</b> Use a different password everywhere you go.  
      Use passwords with at least 70 bits of entropy.</p>
    <hr>


    <br><b>1) Select minimum entropy:</b>
    <br>
      <input onclick="generate_random()" name="entropy" type="radio" value="55"         >55-bits
      <input onclick="generate_random()" name="entropy" type="radio" value="60"         >60-bits
      <input onclick="generate_random()" name="entropy" type="radio" value="65"         >65-bits
      <input onclick="generate_random()" name="entropy" type="radio" value="70" checked >70-bits
      <input onclick="generate_random()" name="entropy" type="radio" value="75"         >75-bits
      <input onclick="generate_random()" name="entropy" type="radio" value="80"         >80-bits
      <input onclick="generate_random()" name="entropy" type="radio" value="99"         >99-bits

    <br><small><i>(More bits = more security. 70-bits is the recommended minimum.)</i></small>
    <br>


    <br><b>2) Select an output format:</b>
    <select>
      <option onclick="generate_random()" name="random" selected="selected" >Base-94            </option>
      <option onclick="generate_random()" name="random"                     >Base-85            </option>
      <option onclick="generate_random()" name="random"                     >Base-64 (+/)       </option>
      <option onclick="generate_random()" name="random"                     >Base-64 (-_)       </option>
      <option onclick="generate_random()" name="random"                     >Base-62            </option>
      <option onclick="generate_random()" name="random"                     >Base-58 (Bitcoin)  </option>
      <option onclick="generate_random()" name="random"                     >Base-52            </option>
      <option onclick="generate_random()" name="random"                     >Base-36            </option>
      <option onclick="generate_random()" name="random"                     >Base-32            </option>
      <option onclick="generate_random()" name="random"                     >Base-26            </option>
      <option onclick="generate_random()" name="random"                     >Base-16            </option>
      <option onclick="generate_random()" name="random"                     >Base-10            </option>
      <option onclick="generate_random()" name="random"                     >Base-8             </option>
      <option onclick="generate_random()" name="random"                     >Base-2             </option>
      <option onclick="generate_random()" name="random"                     >Coin Flips         </option>
      <option onclick="generate_random()" name="random"                     >DNA Sequence       </option>
    </select>

    <br><small>(All output formats deliver aproximately the same password strength.)</small>
    <br>


    <br><b>3) </b> 
      <button onclick="generate_random()" value="Generate">Click here to generate a new password</button>
    <br>


    <br><b>4) Your new password is:</b> 
    <br>
    <br>
    <span id="random-pass" class="password"></span>
    <br>
    <br>
    <small>(<span id="random-length" ></span> characters wide, 
            <span id="random-entropy"></span> bits of entropy)</small>
    <br>
    <br>


    <br><b>5) Once you copy your password, close this page.</b>




    <script type="text/javascript">

var spaces=false;


String.prototype.rtrim = function() { return this.replace(/\s+$/g,""); }


function get_entropy() { return parseInt(document.querySelector('input[name="entropy"]:checked').value);}


/* Uniform, unbiased, secure, random number generator */
function sec_rand(count) {
    var min;
    var rand_array = new Uint32Array(1);

    const my_crypto = window.crypto || window.msCrypto;

    // ensure `count' is a 32-bit integer
    count >>>= 0;

    // force the range of [`min', 2**32] to be a multiple of `count'
    min = (-count >>> 0) % count;

    do {my_crypto.getRandomValues(rand_array);} while (rand_array[0] < min);

    return rand_array[0] % count;
}


function generate_pass(len, set, spaces) {
    var pass = "";
    if (typeof set == "string") var pass_arr = set.split("");
    else pass_arr = set;
    for(i=len; i--;) {
        if (spaces) {pass += pass_arr[sec_rand(set.length)]; pass += " ";}
        else         pass += pass_arr[sec_rand(set.length)];
    }
    return pass.rtrim();
}


function generate_random() {
    var s = '';
    var entropy         = get_entropy();
    var pass_id         = document.getElementById('random-pass');
    var pass_length     = document.getElementById('random-length');
    var pass_entropy    = document.getElementById('random-entropy');

    var option          = document.querySelector('option[name="random"]:checked').value;

    if (option == "Base-94") { for (i=0; i<94; i++) s += String.fromCharCode(33+i); }
    else if (option == "Base-85"            ) { var s =           "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!#$%&()*+-;<=>?@^_`{|}~"; }
    else if (option == "Base-64 (+/)"       ) { var s =           "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/"; }
    else if (option == "Base-64 (-_)"       ) { var s =           "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_"; }
    else if (option == "Base-62"            ) { var s =           "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"; }
    else if (option == "Base-58 (Bitcoin)"  ) { var s =  "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"; }
    else if (option == "Base-52"            ) { var s =           "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"; }
    else if (option == "Base-36"            ) { var s = "0123456789abcdefghijklmnopqrstuvwxyz"; }
    else if (option == "Base-32"            ) { var s = "0123456789abcdefghjkmnpqrstvwxyz"; }
    else if (option == "Base-26"            ) { var s =           "abcdefghijklmnopqrstuvwxyz"; }
    else if (option == "Base-16"            ) { var s = "0123456789abcdef"; }
    else if (option == "Base-10"            ) { var s = "0123456789"; }
    else if (option == "Base-8"             ) { var s = "01234567"; }
    else if (option == "Base-2"             ) { var s = "01"; }

    else if (option == "Coin Flips"         ) { var s = "HT"; }
    else if (option == "DNA Sequence"       ) { var s = "ACGT"; }

    var len = Math.ceil(entropy/Math.log2(s.length));
    var pass = generate_pass(len, s);

    //Set values in html
    pass_id.innerText       = pass;

     pass_length.innerHTML  = len;
    pass_entropy.innerHTML  = Math.floor(len * Math.log2(s.length));
}

    </script>

  </body>
</html>
