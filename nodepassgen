#!/usr/bin/env node
'use strict'

const fs = require('fs')
const path = require('path')
const main = require('./js/main')

const alternate = require('./js/alternate')
const currency = require('./js/cryptocurrency')
const diceware = require('./js/diceware')
const eff = require('./js/eff')
const pseudo = require('./js/pseudowords')
const random = require('./js/random')

const keyboard = require('./js/keyboard')

/** Print usage. */
function printUsage() {
  // Print column limit in editor to 96 characters-------------------------------------------->|
  console.log('Usage: nodepassgen [OPTION [ARG]]...')
  console.log('NOTE: A Unicode font may be needed to view some of the passwords correctly.')
  console.log('  -h, --help                 Print this help and exit.')
  console.log('  -a, --alternate WORDLIST   Choose an alternate wordlist. Default is Trump.')
  console.log('                               WORDLIST must be one of:')
  console.log('                                 Acronym, Afrikaans, Belarusian, Colors, Common,')
  console.log('                                 Croatian, Deseret, Elvish, Everything, Klingon,')
  console.log('                                 LOTR, Mongolian, PGP, Pokerware, Rockyou,')
  console.log('                                 Serbian, Shavian, Simpsons, S/KEY, Trump,')
  console.log('                                 Ukranian, VAN, Wordle.')
  console.log('                               NOTE: "English" combines every English word list.')
  console.log('  -b, --bitcoin LANGUAGE     Choose a Bitcoin language. Default is English.')
  console.log('                               LANGUAGE must be one of:')
  console.log('                                Chinese, Czech, English, French, Italian,')
  console.log('                                Japanese, Korean, Portuguese, Spanish.')
  console.log('                               NOTE: Simplified Chinese is the default Chinese')
  console.log('                               character set. If you want to use Traditional')
  console.log('                               Chinese, use --traditional.')
  console.log('  -d, --diceware LANGUAGE    Choose a Diceware language. Default is English.')
  console.log('                               LANGUAGE must be one of:')
  console.log('                                 Basque, Beale, Bulgarian, Catalan, Chinese,')
  console.log('                                 Czech, Danish, Dutch, English, Esperanto,')
  console.log('                                 Estonian, Finnish, French, German, Greek,')
  console.log('                                 Hebrew, Hungarian, Italian, Japanese, Latin,')
  console.log('                                 Maori, NLP, Norwegian, Polish, Portuguese,')
  console.log('                                 Romanian, Russian, Slovak, Slovenian, Spanish,')
  console.log('                                 Swedish, Turkish.')
  console.log('                               NOTE: NLP is "Natural Language Passwords".')
  console.log('  -e, --eff WORDLIST         Choose an EFF wordlist. Default is Short.')
  console.log('                               WORDLIST must be one of:')
  console.log('                                 Distant, Long, Potter, Short, Thrones, Trek,')
  console.log('                                 Wars.')
  console.log('  -H, --hyphenate            Hyphenate Alternate, Bitcoin, Diceware, and EFF ')
  console.log('                               passphrases.')
  console.log('  -j, --json                 Output the passwords and meta in JSON format.')
  console.log('  -k, --keyboard             Collect random entropy from keyboard timings.')
  console.log('                               See -u, --use-entropy.')
  console.log('  -m, --min-entropy NUMBER   Set a minimum entropy in bits. Default is 70.')
  console.log('  -M, --monero LANGUAGE      Choose a Monero language. Default is English.')
  console.log('                               LANGUAGE must be one of:')
  console.log('                                Chinese, Dutch, English, Esperanto, French,')
  console.log('                                German, Italian, Japanese, Lojban, Portuguese,')
  console.log('                                Russian, Spanish.')
  console.log('  -o, --only GENERATOR       Choose a generator instead of printing all six.')
  console.log('                               GENERATOR must be one of:')
  console.log('                                 Alternate, Bitcoin, Diceware, EFF, Monero,')
  console.log('                                 Pseudowords, Random, System.')
  console.log('  -p, --pseudowords OPTION   Choose a Pseudowords option. Default is Apple.')
  console.log('                               OPTION must be one of:')
  console.log('                                 Apple, Babble, Daefen, DIBELS, Koremutake,')
  console.log('                                 Lepron, Letterblock, Munemo, Proquints, Urbit.')
  console.log('  -r, --random SET           Choose from a string set. Default is Base94.')
  console.log('                               SET must be one of:')
  console.log('                                 Base256, Base220, Base188, Base94, Base85,')
  console.log('                                 Base64, Base62, Base58, Base52, Base45, Base36,')
  console.log('                                 Base32, Base26, Base16, Base10, Base8, Base4,')
  console.log('                                 Base2, Emoji, Whitespace')
  console.log('  -s, --stats                Report collected keyboard entropy statistics.')
  console.log('                               A "sample" is 16 bits long and can be a word,')
  console.log('                               set, or character depending on the password type.')
  console.log('  -t, --traditional          Use Traditional Chinese with Bitcoin.')
  console.log('  -u, --use-entropy          Use previously saved entropy for generation.')
  console.log('                               Must be used with -o, --only.')
  console.log('                               See also -k, --keyboard.')
  process.exit()
}

let generator
let useEntropy = false
const results = []
const args = process.argv.slice(2)

const entropyFile = path.join(
  process.platform === 'win32' ? process.env.HOMEpath : process.env.HOME,
  'nodepassgen.json'
)

// Start processing the command line options
if (args.includes('-h') || args.includes('--help')) {
  printUsage()
}

if (args.includes('-o') || args.includes('--only')) {
  // only one specific generator
  const option = args.findIndex((option) => option === '-o' || option === '--only')
  generator = args[option + 1]

  if (args.includes('-u') || args.includes('--use-entropy')) {
    // use keyboard entropy
    useEntropy = true
  }
} else if (args.includes('-u') || args.includes('--use-entropy')) {
  // require -o, --only however
  console.error('You must use `-o, --only GENERATOR` with `-u, --use-entropy`.')
  process.exit(1)
}

if (args.includes('-k') || args.includes('--keyboard')) {
  // collect keyboard entropy, not generate passwords
  keyboard.collectInput(entropyFile)
} else if (args.includes('-s') || args.includes('--stats')) {
  // report keyboard entropy stats, not generate passwords
  try {
    const entropy = JSON.parse(fs.readFileSync(entropyFile, 'utf8')).length

    console.log(
      'You have ' + entropy + ' samples (' + entropy * 16 + ' bits) of entropy available.'
    )
  } catch (err) {
    console.log(
      'You have not collected any keyboard entropy. Collect some with `-k, --keyboard`.'
    )
  }
} else if (generator !== undefined && generator !== null) {
  // otherwise generate passwords from a specific generator
  if (generator.toLowerCase() === 'alternate') {
    results.push(alternate.genPass(useEntropy))
  } else if (generator.toLowerCase() === 'bitcoin') {
    results.push(currency.bitcoin(useEntropy))
  } else if (generator.toLowerCase() === 'monero') {
    results.push(currency.monero(useEntropy))
  } else if (generator.toLowerCase() === 'diceware') {
    results.push(diceware.genPass(useEntropy))
  } else if (generator.toLowerCase() === 'eff') {
    results.push(eff.genPass(useEntropy))
  } else if (generator.toLowerCase() === 'pseudowords') {
    results.push(pseudo.genPass(useEntropy))
  } else if (generator.toLowerCase() === 'random') {
    results.push(random.genPass(useEntropy))
  } else {
    const option = args.findIndex((option) => option === '-o' || option === '--only')
    console.log('Unknown generator:', args[option + 1])
    process.exit(1)
  }
} else {
  // otherwise generate all the passwords
  results.push(alternate.genPass(useEntropy))
  if (args.includes('-M') || args.includes('--monero')) {
      results.push(currency.monero(useEntropy))
  } else {
      results.push(currency.bitcoin(useEntropy))
  }
  results.push(diceware.genPass(useEntropy))
  results.push(eff.genPass(useEntropy))
  results.push(pseudo.genPass(useEntropy))
  results.push(random.genPass(useEntropy))
}

if (args.includes('-j') || args.includes('--json')) {
  // output valid json
  console.log(JSON.stringify(results))
} else {
  for (let i = 0; i < results.length; i++) {
    console.log(results[i].Generator + '(' + results[i].Wordlist + '): ' + results[i].Password)
  }
}