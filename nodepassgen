#!/usr/bin/nodejs

let generator
const fs = require('fs')
const crypto = require('crypto')
const results = []
const args = process.argv

function printUsage () {
  console.log('Usage: node main.js [OPTION [ARG]]...')
  console.log('NOTE: A Unicode font may be needed to view some of the passwords correctly.')
  console.log('  -h, --help                 Print this help and exit.')
  console.log('  -a, --alternate WORDLIST   Choose an alternate wordlist. Default is Trump.')
  console.log('                               WORDLIST must be one of:')
  console.log('                                 Deseret, Colors, Elvish, Klingon, PGP,')
  console.log('                                 Rockyou, Shavian, Simpsons, Trump')
  console.log('  -b, --bitcoin LANGUAGE     Choose a Bitcoin language. Default is English.')
  console.log('                               LANGUAGE must be one of:')
  console.log('                                Chinese, Czech, English, French, Italian,')
  console.log('                                Japanese, Korean, Portuguese')
  console.log('                               NOTE: Simplified Chinese is the default Chinese')
  console.log('                               character set. If you want to use Traditional')
  console.log('                               Chinese, use --traditional.')
  console.log('  -B, --bubble               Choose Bubble Babble encoding.')
  console.log('  -d, --diceware LANGUAGE    Choose a Diceware language. Default is English.')
  console.log('                               LANGUAGE must be one of:')
  console.log('                                 Basque, Beale, Bulgarian, Catalan, Chinese,')
  console.log('                                 Czech, Danish, Dutch, English, Esperanto,')
  console.log('                                 Estonian, Finnish, French, German, Hebrew,')
  console.log('                                 Hungarian, Italian, Japanese, Latin, Maori,')
  console.log('                                 Norwegian, Polish, Portuguese, Romanian,')
  console.log('                                 Russian, Slovak, Slovenian, Spanish, Swedish,')
  console.log('                                 Turkish')
  console.log('  -D, --dicekey              Generate a hard-coded 198-bit entropy text-based')
  console.log('                               DiceKeys key. Format of the key is:')
  console.log('                               <character><side><orientation> where:')
  console.log('                                 <character>: Shuffled A-Z without Q ')
  console.log('                                      <side>: Random side 1-6 of the die')
  console.log('                               <orientation>: Random N,E,S,W cardinal direction')
  console.log('  -e, --eff WORDLIST         Choose an EFF wordlist. Default is Short.')
  console.log('                               WORDLIST must be one of:')
  console.log('                                 Distant, Long, Potter, Short, Trek, Wars.')
  console.log('  -H, --hyphenate            Hyphenate Diceware, EFF, & Alternate passphrases.')
  console.log('  -j, --json                 Output the passwords and meta in JSON format.')
  console.log('  -k, --kpop                 Choose Korean K-pop words.')
  console.log('  -m, --min-entropy NUMBER   Set a minimum entropy in bits. Default is 70.')
  console.log('  -n, --ninja                Choose Secret Ninja encoding.')
  console.log('  -o, --only GENERATOR       Choose a generator instead of printing all six.')
  console.log('                               GENERATOR must be one of:')
  console.log('                                 Alternate, Bitcoin, Diceware, EFF,')
  console.log('                                 Pseudowords, Random, System')
  console.log('  -r, --random SET           Choose from a string set. Default is Base94')
  console.log('                               SET must be one of:')
  console.log('                                 Base256, Base188, Base94, Base85, Base64,')
  console.log('                                 Base62, Base58, Base52, Base36, Base32,')
  console.log('                                 Base26, Base16, Base10, Base8, Base2, Coins,')
  console.log('                                 DNA, Emoji')
  console.log('                               NOTE: Braile Base256, use -R, --braille.')
  console.log('  -R, --braille              Use Braille patterns for Base256.')
  console.log('  -s, --system               Use /usr/share/dict/words for the passphrase.')
  console.log('                               NOTE: larger word lists have more obscure words.')
  console.log('  -t, --traditional          Use Traditional Chinese with Bitcoin.')
  process.exit()
}

function getEntropy () {
  let entropy
  if (args.indexOf('--min-entropy') !== -1) {
    entropy = args[args.indexOf('--min-entropy') + 1]
  } else if (args.indexOf('-m') !== -1) {
    entropy = args[args.indexOf('-m') + 1]
  } else {
    return 70
  }
  if (entropy < 55) {
    console.log('Entropy value too low. Must be at least 55-bits.')
    process.exit(1)
  } else {
    return entropy
  }
}

function secRand (count) {
  let rand
  count >>>= 0
  const min = (-count >>> 0) % count
  do {
    rand = parseInt(crypto.randomBytes(4).toString('hex'), 16)
  } while (rand < min)
  return rand % count
}

function generatePass (len, set, spaces) {
  let pass = ''
  let passArr = ''
  if (typeof set === 'string') {
    passArr = set.split('')
  } else {
    passArr = set
  }
  for (let i = len; i--;) {
    if (spaces) {
      pass += passArr[secRand(set.length)]
      pass += ' '
    } else pass += passArr[secRand(set.length)]
  }
  return pass.trim()
}

function generateDiceware () {
  let lang
  let wordlist = []
  if (args.indexOf('--diceware') !== -1) {
    lang = args[args.indexOf('--diceware') + 1]
  } else if (args.indexOf('-d') !== -1) {
    lang = args[args.indexOf('-d') + 1]
  } else {
    lang = 'English'
  }
  switch (lang) {
    case 'Basque':
    case 'basque': {
      const dicewareBasque = require('./lists/dicewareBasque')
      wordlist = dicewareBasque.wordlist
      lang = 'Basque'
      break
    }
    case 'Beale':
    case 'beale': {
      const dicewareBeale = require('./lists/dicewareBeale')
      wordlist = dicewareBeale.wordlist
      lang = 'Beale'
      break
    }
    case 'Bulgarian':
    case 'bulgarian': {
      const dicewareBulgarian = require('./lists/dicewareBulgarian')
      wordlist = dicewareBulgarian.wordlist
      lang = 'Bulgarian'
      break
    }
    case 'Catalan':
    case 'catalan': {
      const dicewareCatalan = require('./lists/dicewareCatalan')
      wordlist = dicewareCatalan.wordlist
      lang = 'Catalan'
      break
    }
    case 'Chinese':
    case 'chinese': {
      const dicewareChinese = require('./lists/dicewareChinese')
      wordlist = dicewareChinese.wordlist
      lang = 'Chinese'
      break
    }
    case 'Czech':
    case 'czech': {
      const dicewareCzech = require('./lists/dicewareCzech')
      wordlist = dicewareCzech.wordlist
      lang = 'Czech'
      break
    }
    case 'Danish':
    case 'danish': {
      const dicewareDanish = require('./lists/dicewareDanish')
      wordlist = dicewareDanish.wordlist
      lang = 'Danish'
      break
    }
    case 'Dutch':
    case 'dutch': {
      const dicewareDutch = require('./lists/dicewareDutch')
      wordlist = dicewareDutch.wordlist
      lang = 'Dutch'
      break
    }
    case 'English':
    case 'english': {
      const dicewareEnglish = require('./lists/dicewareEnglish')
      wordlist = dicewareEnglish.wordlist
      lang = 'English'
      break
    }
    case 'Esperanto':
    case 'esperanto': {
      const dicewareEsperanto = require('./lists/dicewareEsperanto')
      wordlist = dicewareEsperanto.wordlist
      lang = 'Esperanto'
      break
    }
    case 'Estonian':
    case 'estonian': {
      const dicewareEstonian = require('./lists/dicewareEstonian')
      wordlist = dicewareEstonian.wordlist
      lang = 'Estonian'
      break
    }
    case 'Finnish':
    case 'finnish': {
      const dicewareFinnish = require('./lists/dicewareFinnish')
      wordlist = dicewareFinnish.wordlist
      lang = 'Finnish'
      break
    }
    case 'French':
    case 'french': {
      const dicewareFrench = require('./lists/dicewareFrench')
      wordlist = dicewareFrench.wordlist
      lang = 'French'
      break
    }
    case 'German':
    case 'german': {
      const dicewareGerman = require('./lists/dicewareGerman')
      wordlist = dicewareGerman.wordlist
      lang = 'German'
      break
    }
    case 'Hebrew':
    case 'hebrew': {
      const dicewareHebrew = require('./lists/dicewareHebrew')
      wordlist = dicewareHebrew.wordlist
      lang = 'Hebrew'
      break
    }
    case 'Hungarian':
    case 'hungarian': {
      const dicewareHungarian = require('./lists/dicewareHungarian')
      wordlist = dicewareHungarian.wordlist
      lang = 'Hungarian'
      break
    }
    case 'Italian':
    case 'italian': {
      const dicewareItalian = require('./lists/dicewareItalian')
      wordlist = dicewareItalian.wordlist
      lang = 'Italian'
      break
    }
    case 'Japanese':
    case 'japanese': {
      const dicewareJapanese = require('./lists/dicewareJapanese')
      wordlist = dicewareJapanese.wordlist
      lang = 'Japanese'
      break
    }
    case 'Latin':
    case 'latin': {
      const dicewareLatin = require('./lists/dicewareLatin')
      wordlist = dicewareLatin.wordlist
      lang = 'Latin'
      break
    }
    case 'Maori':
    case 'maori': {
      const dicewareMaori = require('./lists/dicewareMaori')
      wordlist = dicewareMaori.wordlist
      lang = 'Maori'
      break
    }
    case 'Norwegian':
    case 'norwegian': {
      const dicewareNorwegian = require('./lists/dicewareNorwegian')
      wordlist = dicewareNorwegian.wordlist
      lang = 'Norwegian'
      break
    }
    case 'Polish':
    case 'polish': {
      const dicewarePolish = require('./lists/dicewarePolish')
      wordlist = dicewarePolish.wordlist
      lang = 'Polish'
      break
    }
    case 'Portuguese':
    case 'portuguese': {
      const dicewarePortuguese = require('./lists/dicewarePortuguese')
      wordlist = dicewarePortuguese.wordlist
      lang = 'Portuguese'
      break
    }
    case 'Romanian':
    case 'romanian': {
      const dicewareRomanian = require('./lists/dicewareRomanian')
      wordlist = dicewareRomanian.wordlist
      lang = 'Romanian'
      break
    }
    case 'Russian':
    case 'russian': {
      const dicewareRussian = require('./lists/dicewareRussian')
      wordlist = dicewareRussian.wordlist
      lang = 'Russian'
      break
    }
    case 'Slovak':
    case 'slovak': {
      const dicewareSlovak = require('./lists/dicewareSlovak')
      wordlist = dicewareSlovak.wordlist
      lang = 'Slovak'
      break
    }
    case 'Slovenian':
    case 'slovenian': {
      const dicewareSlovenian = require('./lists/dicewareSlovenian')
      wordlist = dicewareSlovenian.wordlist
      lang = 'Slovenian'
      break
    }
    case 'Spanish':
    case 'spanish': {
      const dicewareSpanish = require('./lists/dicewareSpanish')
      wordlist = dicewareSpanish.wordlist
      lang = 'Spanish'
      break
    }
    case 'Swedish':
    case 'swedish': {
      const dicewareSwedish = require('./lists/dicewareSwedish')
      wordlist = dicewareSwedish.wordlist
      lang = 'Swedish'
      break
    }
    case 'Turkish':
    case 'turkish': {
      const dicewareTurkish = require('./lists/dicewareTurkish')
      wordlist = dicewareTurkish.wordlist
      lang = 'Turkish'
      break
    }
    default: {
      console.log('Unknown language: ' + lang)
      process.exit(1)
    }
  }
  const assocArr = {}
  const entropy = getEntropy()
  const len = Math.ceil(entropy / Math.log2(wordlist.length))
  let pass = generatePass(len, wordlist, true)
  if ((args.indexOf('--hyphenate') !== -1) || (args.indexOf('-H')) !== -1) {
    pass = pass.split(' ').join('-')
  }
  assocArr.Generator = 'Diceware'
  assocArr.Wordlist = lang
  assocArr.Password = pass
  assocArr.Characters = pass.replace(/\s/g, '').length
  assocArr.Entropy = Math.floor(len * Math.log2(wordlist.length))
  return assocArr
}

function generateEff () {
  let effSet
  let wordlist = []
  if (args.indexOf('--eff') !== -1) {
    effSet = args[args.indexOf('--eff') + 1]
  } else if (args.indexOf('-e') !== -1) {
    effSet = args[args.indexOf('-e') + 1]
  } else {
    effSet = 'Short'
  }
  switch (effSet) {
    case 'Distant':
    case 'distant': {
      const effDistant = require('./lists/effDistant')
      wordlist = effDistant.wordlist
      effSet = 'Distant'
      break
    }
    case 'Long':
    case 'long': {
      const effLong = require('./lists/effLong')
      wordlist = effLong.wordlist
      effSet = 'Long'
      break
    }
    case 'Potter':
    case 'potter': {
      const effHarryPotter = require('./lists/effHarryPotter')
      wordlist = effHarryPotter.wordlist
      effSet = 'Harry Potter'
      break
    }
    case 'Short':
    case 'short': {
      const effShort = require('./lists/effShort')
      wordlist = effShort.wordlist
      effSet = 'Short'
      break
    }
    case 'Thrones':
    case 'thrones': {
      const effGameOfThrones = require('./lists/effGameOfThrones')
      wordlist = effGameOfThrones.wordlist
      effSet = 'Game of Thrones'
      break
    }
    case 'Trek':
    case 'trek': {
      const effStarTrek = require('./lists/effStarTrek')
      wordlist = effStarTrek.wordlist
      effSet = 'Star Trek'
      break
    }
    case 'Wars':
    case 'wars': {
      const effStarWars = require('./lists/effStarWars')
      wordlist = effStarWars.wordlist
      effSet = 'Star Wars'
      break
    }
    default: {
      console.log('Unknown wordlist: ' + effSet)
      process.exit()
    }
  }
  const assocArr = {}
  const entropy = getEntropy()
  const len = Math.ceil(entropy / Math.log2(wordlist.length))
  let pass = generatePass(len, wordlist, true)
  if ((args.indexOf('--hyphenate') !== -1) || (args.indexOf('-H')) !== -1) {
    pass = pass.split(' ').join('-')
  }
  assocArr.Generator = 'EFF'
  assocArr.Wordlist = effSet
  assocArr.Password = pass
  assocArr.Characters = pass.replace(/\s/g, '').length
  assocArr.Entropy = Math.floor(len * Math.log2(wordlist.length))
  return assocArr
}

function generateAlternate () {
  let altSet
  let wordlist = []
  if (args.indexOf('--alternate') !== -1) {
    altSet = args[args.indexOf('--alternate') + 1]
  } else if (args.indexOf('-a') !== -1) {
    altSet = args[args.indexOf('-a') + 1]
  } else {
    altSet = 'Trump'
  }
  switch (altSet) {
    case 'Deseret':
    case 'deseret': {
      const deseretWordlist = require('./lists/alternateDeseret')
      wordlist = deseretWordlist.wordlist
      altSet = 'Deseret'
      break
    }
    case 'Colors':
    case 'colors': {
      const colorsWordlist = require('./lists/alternateColors')
      wordlist = colorsWordlist.wordlist
      altSet = 'Colors'
      break
    }
    case 'Elvish':
    case 'elvish': {
      const elvishWordlist = require('./lists/alternateElvish')
      wordlist = elvishWordlist.wordlist
      altSet = 'Elvish'
      break
    }
    case 'Klingon':
    case 'klingon': {
      const klingonWordlist = require('./lists/alternateKlingon')
      wordlist = klingonWordlist.wordlist
      altSet = 'Klingon'
      break
    }
    case 'PGP':
    case 'Pgp':
    case 'pgp': {
      const pgpWordlist = require('./lists/alternatePgp')
      wordlist = pgpWordlist.wordlist
      altSet = 'PGP'
      break
    }
    case 'Rockyou':
    case 'RockYou':
    case 'rockyou': {
      const rockyouWordlist = require('./lists/alternateRockyou')
      wordlist = rockyouWordlist.wordlist
      altSet = 'RockYou'
      break
    }
    case 'Shavian':
    case 'shavian': {
      const shavianWordlist = require('./lists/alternateShavian')
      wordlist = shavianWordlist.wordlist
      altSet = 'Shavian'
      break
    }
    case 'Simpsons':
    case 'simpsons': {
      const simpsonsWordlist = require('./lists/alternateSimpsons')
      wordlist = simpsonsWordlist.wordlist
      altSet = 'Simpsons'
      break
    }
    case 'Trump':
    case 'trump': {
      const trumpWordlist = require('./lists/alternateTrump')
      wordlist = trumpWordlist.wordlist
      altSet = 'Trump'
      break
    }
    default: {
      console.log('Unknown wordlist: ' + altSet)
      process.exit(1)
    }
  }
  const assocArr = {}
  const entropy = getEntropy()
  const len = Math.ceil(entropy / Math.log2(wordlist.length))
  let pass = generatePass(len, wordlist, true)
  if ((args.indexOf('--hyphenate') !== -1) || (args.indexOf('-H')) !== -1) {
    pass = pass.split(' ').join('-')
  }
  assocArr.Generator = 'Alternate'
  assocArr.Wordlist = altSet
  assocArr.Password = pass
  assocArr.Characters = pass.replace(/\s/g, '').length
  assocArr.Entropy = Math.floor(len * Math.log2(wordlist.length))
  return assocArr
}

function generateBitcoin () {
  let lang
  let wordlist = []
  if (args.indexOf('--bitcoin') !== -1) {
    lang = args[args.indexOf('--bitcoin') + 1]
  } else if (args.indexOf('-b') !== -1) {
    lang = args[args.indexOf('-b') + 1]
  } else {
    lang = 'English'
  }
  switch (lang) {
    case 'Chinese':
    case 'chinese': {
      if ((args.indexOf('--traditional')) !== -1 || (args.indexOf('-t')) !== -1) {
        const bitcoinCNTrad = require('./lists/bitcoinCNTrad')
        wordlist = bitcoinCNTrad.wordlist
        lang = 'Chinese (Trad)'
      } else {
        const bitcoinCNSimp = require('./lists/bitcoinCNSimp')
        wordlist = bitcoinCNSimp.wordlist
        lang = 'Chinese (Simp)'
      }
      break
    }
    case 'Czech':
    case 'czech': {
      const czechWordlist = require('./lists/bitcoinCZ')
      wordlist = czechWordlist.wordlist
        lang = 'Czech'
      break
    }
    case 'English':
    case 'english': {
      const englishWordlist = require('./lists/bitcoinEN')
      wordlist = englishWordlist.wordlist
        lang = 'English'
      break
    }
    case 'French':
    case 'french': {
      const frenchWordlist = require('./lists/bitcoinFR')
      wordlist = frenchWordlist.wordlist
        lang = 'French'
      break
    }
    case 'Italian':
    case 'italian': {
      const italianWordlist = require('./lists/bitcoinIT')
      wordlist = italianWordlist.wordlist
        lang = 'Italian'
      break
    }
    case 'Japanese':
    case 'japanese': {
      const japaneseWordlist = require('./lists/bitcoinJP')
      wordlist = japaneseWordlist.wordlist
        lang = 'Japanese'
      break
    }
    case 'Korean':
    case 'korean': {
      const koreanWordlist = require('./lists/bitcoinKR')
      wordlist = koreanWordlist.wordlist
        lang = 'Korean'
      break
    }
    case 'Portuguese':
    case 'portuguese': {
      const portugueseWordlist = require('./lists/bitcoinPT')
      wordlist = portugueseWordlist.wordlist
        lang = 'Portuguese'
      break
    }
    case 'Spanish':
    case 'spanish': {
      const spanishWordlist = require('./lists/bitcoinES')
      wordlist = spanishWordlist.wordlist
        lang = 'Spanish'
      break
    }
    default: {
      console.log('Unknown language: ' + lang)
      process.exit(1)
    }
  }
  const assocArr = {}
  const entropy = getEntropy()
  const len = Math.ceil(entropy / Math.log2(wordlist.length))
  let pass = generatePass(len, wordlist, true)
  if ((args.indexOf('--hyphenate') !== -1) || (args.indexOf('-H')) !== -1) {
    pass = pass.split(' ').join('-')
  }
  assocArr.Generator = 'Bitcoin'
  assocArr.Wordlist = lang
  assocArr.Password = pass
  assocArr.Characters = pass.replace(/\s/g, '').length
  assocArr.Entropy = Math.floor(len * Math.log2(wordlist.length))
  return assocArr
}

function generateDicekey () {
  const chars = 'ABCDEFGHIJKLMNOPRSTUVWXYZ'.split('')
  let pass = ''
  const assocArr = {}
  for (let i = 0; i < chars.length; i++) {
    const randInt = secRand(chars.length)
    const tmp = chars[randInt]
    chars[randInt] = chars[i]
    chars[i] = tmp
  }
  for (let i = 0; i < chars.length; i++) {
    const dir = 'NESW'.split('')
    pass += chars[i]
    pass += secRand(6) + 1
    pass += dir[secRand(4)]
    pass += ' '
  }
  if ((args.indexOf('--hyphenate') !== -1) || (args.indexOf('-H')) !== -1) {
    pass = pass.trim().split(' ').join('-')
  }
  assocArr.Generator = 'DiceKey'
  assocArr.Wordlist = 'N/A'
  assocArr.Password = pass.trim()
  assocArr.Characters = pass.trim().replace(/\s/g, '').length
  assocArr.Entropy = 198 // hard-coded
  return assocArr
}

function generateSysPass () {
  const dict = fs.readFileSync('/usr/share/dict/words').toString()
  const wordlist = dict.split('\n')
  const assocArr = {}
  const entropy = getEntropy()
  const len = Math.ceil(entropy / Math.log2(wordlist.length))
  let pass = generatePass(len, wordlist, true)
  if ((args.indexOf('--hyphenate') !== -1) || (args.indexOf('-H')) !== -1) {
    pass = pass.split(' ').join('-')
  }
  assocArr.Generator = 'System'
  assocArr.Wordlist = '/usr/share/dict/words'
  assocArr.Password = pass
  assocArr.Characters = pass.replace(/\s/g, '').length
  assocArr.Entropy = Math.floor(len * Math.log2(wordlist.length))
  return assocArr
}

function generateApple () {
  function _apple (n) {
    /*
            See the Twitter thread at https://twitter.com/AaronToponce/status/1131406726069084160 for full analysis.

            For n ≥ 1 blocks, the entropy in bits per block is:
                log2(
                    (6n-1) *    //  One lowercase alphabetic character is randomly capitalized
                    19^(4n-1) * //  The total possible combinations of consonants
                    6^(2n) *    //  The total possible combinations of vowels
                    10 * 2n     //  An 'edge' character is a random digit
                )

            E.G.:
                DVccvc:                      log2( 5 * 19^3  * 6^2 * 10 * 2) ~=  24.558 bits
                cvCcvD-cvccvc:               log2(11 * 19^7  * 6^4 * 10 * 4) ~=  48.857 bits
                cvcCvc-Dvccvc-cvccvc:        log2(17 * 19^11 * 6^6 * 10 * 6) ~=  72.231 bits
                cvccVc-cvccvD-cvccvc-cvccvc: log2(23 * 19^15 * 6^8 * 10 * 8) ~=  95.244 bits
                et cetera, et cetera, et cetera.
        */
    return Math.floor(Math.log2((6 * n - 1) * 19 ** (4 * n - 1) * 6 ** (2 * n) * 20 * n))
  }

  const pass = []
  const digits = '0123456789'
  const vowels = 'aeiouy'
  const consonants = 'bcdfghjkmnpqrstvwxz'
  const entropy = getEntropy()

  let n = 1 // number of blocks
  while (_apple(n) <= entropy) { n++ };
  for (let i = 0; i < n; i++) {
    pass[6 * i] = generatePass(1, consonants)
    pass[6 * i + 1] = generatePass(1, vowels)
    pass[6 * i + 2] = generatePass(1, consonants)
    pass[6 * i + 3] = generatePass(1, consonants)
    pass[6 * i + 4] = generatePass(1, vowels)
    pass[6 * i + 5] = generatePass(1, consonants)
  }

  let dLoc = 0
  let cLoc = 0
  const edge = secRand(2 * n) // [0, 2n)
  const digit = generatePass(1, digits)

  if (edge % 2 === 0) { dLoc = 3 * edge } else { dLoc = 3 * edge + 2 }
  pass[dLoc] = digit

  do { cLoc = secRand(pass.length) } while (cLoc === dLoc)
  pass[cLoc] = pass[cLoc].toUpperCase()

  for (let i = n - 1; i > 0; i--) {
    pass.splice(6 * i, 0, '-')
  }

  return [pass.join(''), pass.length, _apple(n)]
}

function generateNinja () {
  const ninja = ['ka', 'zu', 'mi', 'te', 'ku', 'lu', 'ji', 'ri', 'ki', 'zu', 'me', 'ta', 'rin', 'to', 'mo', 'no', 'ke', 'shi', 'ari', 'chi', 'do', 'ru', 'mei', 'na', 'fu', 'zi']
  const entropy = getEntropy()
  const len = Math.ceil(entropy / Math.log2(ninja.length))
  let pass = ''

  for (let i = 0; i < len; i++) {
    pass += ninja[secRand(len)]
    if (i % 3 === 2 && i !== len - 1) {
      pass += '-'
    }
  }
  return [pass, ninja.length, Math.floor(len * Math.log2(ninja.length))]
}

function generateKpop () {
  // 64 unique words = 6 bits of entropy per word
  const kpop = ['A', 'Ah', 'Bae', 'Bin', 'Bo', 'Choi', 'Chul', 'Da', 'Do', 'Dong', 'Eun', 'Gi', 'Gun', 'Ha', 'Hae', 'Hee', 'Ho', 'Hu', 'Hwa', 'Hwan', 'Hye', 'Hyo', 'Hyun', 'Il', 'In', 'Ja', 'Jae', 'Ji', 'Jin', 'Jong', 'Joo', 'Joon', 'Ju', 'Jun', 'Jung', 'Ki', 'Kun', 'Kyu', 'Lee', 'Mi', 'Min', 'Moon', 'Nam', 'Ok', 'Park', 'Rin', 'Seo', 'Seul', 'Shi', 'Sik', 'So', 'Song', 'Soo', 'Su', 'Sun', 'Sung', 'Won', 'Woo', 'Ye', 'Yeon', 'Yoo', 'Yu', 'Yul', 'Yun']
  const entropy = getEntropy()
  const len = Math.ceil(entropy / Math.log2(kpop.length))
  let pass = ''

  for (let i = 0; i < len; i++) {
    pass += kpop[secRand(len)]
    if (i % 2 === 1 && i !== len - 1) {
      pass += '-'
    }
  }
  return [pass, kpop.length, Math.floor(len * Math.log2(kpop.length))]
}

function generateBabble () {
  const pass = []
  const vowels = 'aeiouy'
  const consonants = 'bcdfghklmnprstvzx'
  const vEnt = Math.log2(vowels.length)
  const cEnt = Math.log2(consonants.length)
  const outEnt = (2 * cEnt) + (2 * vEnt)
  const inEnt = (3 * cEnt) + (2 * vEnt)
  let entropy = getEntropy()
  entropy = entropy - (2 * outEnt)
  const len = Math.ceil(entropy / inEnt)
  const totEnt = outEnt + (len * inEnt) + outEnt
  for (let i = 0; i < len + 2; i++) {
    for (let j = 0; j < 5; j++) {
      if (j % 2 === 0) {
        pass[(5 * i) + j] = generatePass(1, consonants)
      } else {
        pass[(5 * i) + j] = generatePass(1, vowels)
      }
    }
  }
  pass[0] = 'x'
  pass[pass.length - 1] = 'x'
  for (let i = pass.length; i > 0; i -= 5) {
    pass.splice(i, 0, '-')
  }
  pass.pop() // strip last '-'
  return [pass.join(''), (len + 2) * 5, Math.floor(totEnt)]
}

function generatePseudowords () {
  let pwType
  let ret
  if ((args.indexOf('--bubble') !== -1) || (args.indexOf('-B')) !== -1) {
    pwType = 'Bubble_Babble'
  } else if ((args.indexOf('--ninja') !== -1) || (args.indexOf('-n')) !== -1) {
    pwType = 'Secret_Ninja'
  } else if ((args.indexOf('--kpop') !== -1) || (args.indexOf('-k')) !== -1) {
    pwType = 'Korean_K-pop'
  } else {
    pwType = 'Apple_Inc'
  }
  if (pwType === 'Apple_Inc') {
    ret = generateApple()
  } else if (pwType === 'Secret_Ninja') {
    ret = generateNinja()
  } else if (pwType === 'Korean_K-pop') {
    ret = generateKpop()
  } else {
    ret = generateBabble()
  }
  const assocArr = {}
  const pass = ret[0]
  const len = ret[1]
  const ent = ret[2]
  assocArr.Generator = 'Pseudowords'
  assocArr.Wordlist = pwType
  assocArr.Password = pass
  assocArr.Characters = len
  assocArr.Entropy = ent
  return assocArr
}

function generateSet (b, randSet) {
  randSet = typeof randSet !== 'undefined' ? randSet : true
  const entropy = getEntropy()
  const assocArr = {}
  let ident = ''
  let s = ''
  switch (b) {
    case 256:
      if ((args.indexOf('--braille') !== -1) || (args.indexOf('-R') !== -1)) {
        s = '⠀⠁⠂⠃⠄⠅⠆⠇⠈⠉⠊⠋⠌⠍⠎⠏⠐⠑⠒⠓⠔⠕⠖⠗⠘⠙⠚⠛⠜⠝⠞⠟⠠⠡⠢⠣⠤⠥⠦⠧⠨⠩⠪⠫⠬⠭⠮⠯⠰⠱⠲⠳⠴⠵⠶⠷⠸⠹⠺⠻⠼⠽⠾⠿'
        s += '⡀⡁⡂⡃⡄⡅⡆⡇⡈⡉⡊⡋⡌⡍⡎⡏⡐⡑⡒⡓⡔⡕⡖⡗⡘⡙⡚⡛⡜⡝⡞⡟⡠⡡⡢⡣⡤⡥⡦⡧⡨⡩⡪⡫⡬⡭⡮⡯⡰⡱⡲⡳⡴⡵⡶⡷⡸⡹⡺⡻⡼⡽⡾⡿'
        s += '⢀⢁⢂⢃⢄⢅⢆⢇⢈⢉⢊⢋⢌⢍⢎⢏⢐⢑⢒⢓⢔⢕⢖⢗⢘⢙⢚⢛⢜⢝⢞⢟⢠⢡⢢⢣⢤⢥⢦⢧⢨⢩⢪⢫⢬⢭⢮⢯⢰⢱⢲⢳⢴⢵⢶⢷⢸⢹⢺⢻⢼⢽⢾⢿'
        s += '⣀⣁⣂⣃⣄⣅⣆⣇⣈⣉⣊⣋⣌⣍⣎⣏⣐⣑⣒⣓⣔⣕⣖⣗⣘⣙⣚⣛⣜⣝⣞⣟⣠⣡⣢⣣⣤⣥⣦⣧⣨⣩⣪⣫⣬⣭⣮⣯⣰⣱⣲⣳⣴⣵⣶⣷⣸⣹⣺⣻⣼⣽⣾⣿'
        ident = 'Braille'
      } else {
        s = 'ḀḁḂḃḄḅḆḇḈḉḊḋḌḍḎḏḐḑḒḓḔḕḖḗḘḙḚḛḜḝḞḟḠḡḢḣḤḥḦḧḨḩḪḫḬḭḮḯḰḱḲḳḴḵḶḷḸḹḺḻḼḽḾḿ'
        s += 'ṀṁṂṃṄṅṆṇṈṉṊṋṌṍṎṏṐṑṒṓṔṕṖṗṘṙṚṛṜṝṞṟṠṡṢṣṤṥṦṧṨṩṪṫṬṭṮṯṰṱṲṳṴṵṶṷṸṹṺṻṼṽṾṿ'
        s += 'ẀẁẂẃẄẅẆẇẈẉẊẋẌẍẎẏẐẑẒẓẔẕẖẗẘẙẚẛẜẝẞẟẠạẢảẤấẦầẨẩẪẫẬậẮắẰằẲẳẴẵẶặẸẹẺẻẼẽẾế'
        s += 'ỀềỂểỄễỆệỈỉỊịỌọỎỏỐốỒồỔổỖỗỘộỚớỜờỞởỠỡỢợỤụỦủỨứỪừỬửỮữỰựỲỳỴỵỶỷỸỹỺỻỼỽỾỿ'
        ident = 'Latin Extended'
      }
      break
    case 188:
      for (let i = 0; i < 94; i++) s += String.fromCharCode(33 + i)
      for (let i = 0; i < 95; i++) s += String.fromCharCode(161 + i)
      s = s.replace(String.fromCharCode(173), '') // soft-hyphen isn't graphical
      ident = 'ISO 8859-1'
      break
    case 94:
      for (let i = 0; i < 94; i++) { s += String.fromCharCode(33 + i) }
      ident = 'Base94'
      break
    case 85:
      s = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!#$%&()*+-;<=>?@^_`{|}~'
      ident = 'Base85'
      break
    case 64:
      s = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_'
      ident = 'Base64'
      break
    case 62:
      s = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
      ident = 'Base62'
      break
    case 58:
      s = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
      ident = 'Base58'
      break
    case 52:
      s = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
      ident = 'Base52'
      break
    case 36:
      s = '0123456789abcdefghijklmnopqrstuvwxyz'
      ident = 'Base36'
      break
    case 32:
      s = '0123456789abcdefghjkmnpqrstvwxyz'
      ident = 'Base32'
      break
    case 26:
      s = 'abcdefghjkmnpqrstvwxyz'
      ident = 'Base26'
      break
    case 16:
      s = '0123456789abcdef'
      ident = 'Base16'
      break
    case 10:
      s = '0123456789'
      ident = 'Base10'
      break
    case 8:
      s = '01234567'
      ident = 'Base8'
      break
    case 4:
      s = 'ACGT'
      ident = 'DNA'
      break
    case 2:
      if ((randSet === 'Coins') || (randSet === 'coins')) {
        s = 'HT'
        ident = 'Coin Flips'
      } else {
        s = '01'
        ident = 'Base2'
      }
      break
  }

  const len = Math.ceil(entropy / Math.log2(s.length))
  const pass = generatePass(len, s)
  assocArr.Generator = 'Random'
  assocArr.Wordlist = ident
  assocArr.Password = pass
  assocArr.Characters = len
  assocArr.Entropy = Math.floor(len * Math.log2(s.length))
  return assocArr
}

function generateRandom () {
  let s = ''
  let randSet
  if (args.indexOf('--random') !== -1) {
    randSet = args[args.indexOf('--random') + 1]
  } else if (args.indexOf('-r') !== -1) {
    randSet = args[args.indexOf('-r') + 1]
  } else {
    randSet = 'Base94'
  }
  switch (randSet) {
    case 'Base256':
    case 'base256':
    case '256':
      s = generateSet(256)
      break
    case 'Base188':
    case 'base188':
    case '188':
      s = generateSet(188)
      break
    case 'Base94':
    case 'base94':
    case '94':
      s = generateSet(94)
      break
    case 'Base85':
    case 'base85':
    case '85':
      s = generateSet(85)
      break
    case 'Base64':
    case 'base64':
    case '64':
      s = generateSet(64)
      break
    case 'Base62':
    case 'base62':
    case '62':
      s = generateSet(62)
      break
    case 'Base58':
    case 'base58':
    case '58':
      s = generateSet(58)
      break
    case 'Base52':
    case 'base52':
    case '52':
      s = generateSet(52)
      break
    case 'Base36':
    case 'base36':
    case '36':
      s = generateSet(36)
      break
    case 'Base32':
    case 'base32':
    case '32':
      s = generateSet(32)
      break
    case 'Base26':
    case 'base26':
    case '26':
      s = generateSet(26)
      break
    case 'Base16':
    case 'base16':
    case '16':
      s = generateSet(16)
      break
    case 'Base10':
    case 'base10':
    case '10':
      s = generateSet(10)
      break
    case 'Base8':
    case 'base8':
    case '8':
      s = generateSet(8)
      break
    case 'Base2':
    case 'base2':
    case 'Coins':
    case 'coins':
    case '2':
      s = generateSet(2, randSet)
      break
    case 'DNA':
    case 'dna':
      s = generateSet(4)
      break
    case 'Emoji':
    case 'emoji':
      s = generateEmoji()
      break
    default:
      console.log('Unknown set: ' + randSet)
      process.exit(1)
  }
  return s
}

function generateEmoji () {
  const emojiWordlist = require('./lists/random_emoji')
  const wordlist = emojiWordlist.wordlist
  const entropy = getEntropy()
  const assocArr = {}
  const len = Math.ceil(entropy / Math.log2(wordlist.length))
  let pass = generatePass(len, wordlist, true)
  pass = pass.replace(/ /g, '')
  assocArr.Generator = 'Random'
  assocArr.Wordlist = 'Emoji'
  assocArr.Password = pass
  assocArr.Characters = len
  assocArr.Entropy = Math.floor(len * Math.log2(wordlist.length))
  return assocArr
}

if ((args.indexOf('--help') !== -1) || (args.indexOf('-h')) !== -1) {
  printUsage()
}

if (args.indexOf('--only') !== -1) {
  generator = args[args.indexOf('--only') + 1]
} else if (args.indexOf('-o') !== -1) {
  generator = args[args.indexOf('-o') + 1]
}
if (generator !== undefined && generator !== null) {
  switch (generator) {
    case 'Alternate':
    case 'alternate':
      results.push(generateAlternate())
      break
    case 'Bitcoin':
    case 'bitcoin':
      results.push(generateBitcoin())
      break
    case 'Diceware':
    case 'diceware':
      results.push(generateDiceware())
      break
    case 'EFF':
    case 'Eff':
    case 'eff':
      results.push(generateEff())
      break
    case 'DiceKey':
    case 'dicekey':
      results.push(generateDicekey())
      break
    case 'System':
    case 'system':
      results.push(generateSysPass())
      break
    case 'Pseudowords':
    case 'pseudowords':
    case 'Pseudoword':
    case 'pseudoword':
    case 'Pseudo':
    case 'pseudo':
      results.push(generatePseudowords())
      break
    case 'Random':
    case 'random':
      results.push(generateRandom())
      break
    default:
      console.log('Unknown generator: ' + args[args.indexOf('--only') + 1])
      process.exit(1)
  }
} else {
  results.push(generateAlternate())
  results.push(generateBitcoin())
  results.push(generateDiceware())
  results.push(generateEff())
  if ((args.indexOf('--system') !== -1) || (args.indexOf('-s') !== -1)) {
    results.push(generateSysPass())
  }
  results.push(generatePseudowords())
  results.push(generateRandom())
  if ((args.indexOf('--dicekey') !== -1) || (args.indexOf('-D') !== -1)) {
    results.push(generateDicekey())
  }
}

if ((args.indexOf('--json') !== -1) || (args.indexOf('-j')) !== -1) {
  const jsonRet = JSON.stringify(results, null, null)
  console.log(jsonRet)
} else {
  for (let i = 0; i < results.length; i++) {
    console.log(results[i].Generator + '(' + results[i].Wordlist + '): ' + results[i].Password)
  }
}
