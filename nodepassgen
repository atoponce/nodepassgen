#!/usr/bin/nodejs
const fs = require('fs');
const crypto = require('crypto');

var spaces=false;
var results = [];
var args = process.argv;

function print_usage() {
    console.log("Usage: node main.js [OPTION [ARG]]...");
    console.log("");
    console.log("NOTE: A Unicode font may be needed to view some of the passwords correctly.");
    console.log("");
    console.log("   -h");
    console.log("   --help");
    console.log("       Print this help and exit.");
    console.log("");
    console.log("   -d <language>");
    console.log("   --diceware <language>");
    console.log("       Choose a Diceware language. Default is English.");
    console.log("       <language> must be one of:");
    console.log("           Basque, Beale, Bulgarian, Catalan, Chinese, Czech, Danish, Dutch,");
    console.log("           Dutch-Alt, English, Esperanto, Estonian, Finnish, French, German,");
    console.log("           Hungarian, Italian, Japanese, Latin, Maori, Norwegian, Polish,");
    console.log("           Portuguese, Russian, Slovak, Slovenian, Spanish, Swedish, Turkish.");
    console.log("");
    console.log("   -e <wordlist>");
    console.log("   --eff <wordlist>");
    console.log("       Choose an EFF wordlist. Default is Short.");
    console.log("       <wordlist> must be one of:");
    console.log("           Distant, Long, Potter, Short, Trek, Wars.");
    console.log("");
    console.log("   -a <wordlist>");
    console.log("   --alternate <wordlist>");
    console.log("       Choose an alternate wordlist. Default is Trump.");
    console.log("       <wordlist> must be one of:");
    console.log("           Colors, Elvish, Klingon, PGP, Rockyou, Simpsons, Trump");
    console.log("");
    console.log("   -b <language>");
    console.log("   --bitcoin <language>");
    console.log("       Choose a Bitcoin language. Default is English.");
    console.log("       <language> must be one of:");
    console.log("           Chinese, English, French, Italian, Japanese, Korean");
    console.log("       NOTE:");
    console.log("           Simplified Chinese is the default Chinese character set.");
    console.log("           If you want to use Traditional Chinese, use --traditional.");
    console.log("");
    console.log("   -t");
    console.log("   --traditional");
    console.log("       Use the Traditional Chinese character set with Bitcoin.");
    console.log("");
    console.log("   -s");
    console.log("   --system");
    console.log("       Use /usr/share/dict/words for building your passphrase.");
    console.log("       Obviously, the more words in that file, the more entropy per word.");
    console.log("       NOTE: larger system word lists will contain more obscure words.")
    console.log("");
    console.log("   -B");
    console.log("   --bubble");
    console.log("       Choose Bubble Babble encoding.");
    console.log("");
    console.log("   -n");
    console.log("   --ninja");
    console.log("       Choose Secret Ninja encoding.");
    console.log("");
    console.log("   -k");
    console.log("   --kpop");
    console.log("       Choose Korean K-pop words.");
    console.log("");
    console.log("   -r <set>");
    console.log("   --random <set>");
    console.log("       Choose from a string set. Default is Base94");
    console.log("       <set> must be one of:");
    console.log("           Base256, Base188, Base94, Base85, Base64, Base62, Base58, Base52");
    console.log("           Base36, Base32, Base26, Base16, Base10, Base8, Base2, Coins, DNA, Emoji");
    console.log("       NOTE: If you want URL-safe Base64, use -u/--urlsafe.");
    console.log("       NOTE: If you want Braile Base256, use -B/--braille.");
    console.log("");
    console.log("   -B");
    console.log("   --braille");
    console.log("       Use Braille patterns for Base256. Ignored with any other option.");
    console.log("");
    console.log("   -u");
    console.log("   --url-safe");
    console.log("       Use URL-safe characters for Base64. Ignored with any other option.");
    console.log("");
    console.log("   -o <generator>");
    console.log("   --only <generator>");
    console.log("       Choose a generator instead of printing all six (default).");
    console.log("       <generator> must be one of:");
    console.log("           Alternate, Bitcoin, Diceware, EFF, Pseudowords");
    console.log("           Random, System");
    console.log("");
    console.log("   -m <number>");
    console.log("   --min-entropy <number>");
    console.log("       Set a minimum entropy requirement in bits. Default is 70.");
    console.log("");
    console.log("   -j");
    console.log("   --json");
    console.log("       Output the passwords and meta in JSON format.");
    console.log("");
    console.log("   -H");
    console.log("   --hyphenate");
    console.log("       Add hyphens to the Diceware, EFF, and Alternate passphrases.");
    console.log("");
    process.exit();
}

String.prototype.rtrim = function() { return this.replace(/\s+$/g,""); }

function get_entropy() {
    var entropy;
    if (args.indexOf("--min-entropy") != -1) {
        entropy = args[args.indexOf("--min-entropy") + 1 ];
    }
    else if (args.indexOf("-m") != -1) {
        entropy = args[args.indexOf("-m") + 1 ];
    }
    else {
        return 70;
    }
    if (entropy < 55) {
        console.log("Entropy value too low. Must be at least 55-bits.");
        process.exit(1);
    }
    else {
        return entropy;
    }
}

function sec_rand(count) {
    var min, rand;
    count >>>= 0;
    min = (-count >>> 0) % count;
    do {
        rand = parseInt(crypto.randomBytes(4).toString('hex'), 16);
    } while (rand < min);
    return rand % count;
}

function generate_pass(len, set, spaces) {
    var pass = "";
    if (typeof set == "string") {
        var pass_arr = set.split("");
    }
    else {
        pass_arr = set;
    }
    for(i=len; i--;) {
        if (spaces) {
            pass += pass_arr[sec_rand(set.length)];
            pass += " ";
        }
        else pass += pass_arr[sec_rand(set.length)];
    }
    return pass.rtrim();
}

function generate_diceware() {
    if (args.indexOf("--diceware") != -1) {
        var lang = args[args.indexOf("--diceware") + 1];
    }
    else if (args.indexOf("-d") != -1) {
        var lang = args[args.indexOf("-d") + 1];
    }
    else {
        var lang = "English";
    }
    var wordlist = [];
    switch(lang) {
        case "Basque":
        case "basque":
            const diceware_basque = require('./lists/diceware_basque');
            wordlist = diceware_basque.wordlist;
            break;
        case "Beale":
        case "beale":
            const diceware_beale = require('./lists/diceware_beale');
            wordlist = diceware_beale.wordlist;
            break;
        case "Bulgarian":
        case "bulgarian":
            const diceware_bulgarian = require('./lists/diceware_bulgarian');
            wordlist = diceware_bulgarian.wordlist;
            break;
        case "Catalan":
        case "catalan":
            const diceware_catalan = require('./lists/diceware_catalan');
            wordlist = diceware_catalan.wordlist;
            break;
        case "Chinese":
        case "chinese":
            const diceware_chinese = require('./lists/diceware_chinese');
            wordlist = diceware_chinese.wordlist;
            break;
        case "Czech":
        case "czech":
            const diceware_czech = require('./lists/diceware_czech');
            wordlist = diceware_czech.wordlist;
            break;
        case "Danish":
        case "danish":
            const diceware_danish = require('./lists/diceware_danish');
            wordlist = diceware_danish.wordlist;
            break;
        case "Dutch":
        case "dutch":
            const diceware_dutch = require('./lists/diceware_dutch');
            wordlist = diceware_dutch.wordlist;
            break;
        case "Dutch-Alt":
        case "Dutch-alt":
        case "dutch-Alt":
        case "dutch-alt":
            const diceware_dutch_alt = require('./lists/diceware_dutch_alt');
            wordlist = diceware_dutch_alt.wordlist;
            break;
        case "English":
        case "english":
            const diceware_english = require('./lists/diceware_english');
            wordlist = diceware_english.wordlist;
            break;
        case "Esperanto":
        case "esperanto":
            const diceware_esperanto = require('./lists/diceware_esperanto');
            wordlist = diceware_esperanto.wordlist;
            break;
        case "Estonian":
        case "estonian":
            const diceware_estonian = require('./lists/diceware_estonian');
            wordlist = diceware_estonian.wordlist;
            break;
        case "Finnish":
        case "finnish":
            const diceware_finnish = require('./lists/diceware_finnish');
            wordlist = diceware_finnish.wordlist;
            break;
        case "French":
        case "french":
            const diceware_french = require('./lists/diceware_french');
            wordlist = diceware_french.wordlist;
            break;
        case "German":
        case "german":
            const diceware_german = require('./lists/diceware_german');
            wordlist = diceware_german.wordlist;
            break;
        case "Hungarian":
        case "hungarian":
            const diceware_hungarian = require('./lists/diceware_hungarian');
            wordlist = diceware_hungarian.wordlist;
            break;
        case "Italian":
        case "italian":
            const diceware_italian = require('./lists/diceware_italian');
            wordlist = diceware_italian.wordlist;
            break;
        case "Japanese":
        case "japanese":
            const diceware_japanese = require('./lists/diceware_japanese');
            wordlist = diceware_japanese.wordlist;
            break;
        case "Latin":
        case "latin":
            const diceware_latin = require('./lists/diceware_latin');
            wordlist = diceware_latin.wordlist;
            break;
        case "Maori":
        case "maori":
            const diceware_maori = require('./lists/diceware_maori');
            wordlist = diceware_maori.wordlist;
            break;
        case "Norwegian":
        case "norwegian":
            const diceware_norwegian = require('./lists/diceware_norwegian');
            wordlist = diceware_norwegian.wordlist;
            break;
        case "Polish":
        case "polish":
            const diceware_polish = require('./lists/diceware_polish');
            wordlist = diceware_polish.wordlist;
            break;
        case "Portuguese":
        case "portuguese":
            const diceware_portuguese = require('./lists/diceware_portuguese');
            wordlist = diceware_portuguese.wordlist;
            break;
        case "Russian":
        case "russian":
            const diceware_russian = require('./lists/diceware_russian');
            wordlist = diceware_russian.wordlist;
            break;
        case "Slovak":
        case "slovak":
            const diceware_slovak = require('./lists/diceware_slovak');
            wordlist = diceware_slovak.wordlist;
            break;
        case "Slovenian":
        case "slovenian":
            const diceware_slovenian = require('./lists/diceware_slovenian');
            wordlist = diceware_slovenian.wordlist;
            break;
        case "Spanish":
        case "spanish":
            const diceware_spanish = require('./lists/diceware_spanish');
            wordlist = diceware_spanish.wordlist;
            break;
        case "Swedish":
        case "swedish":
            const diceware_swedish = require('./lists/diceware_swedish');
            wordlist = diceware_swedish.wordlist;
            break;
        case "Turkish":
        case "turkish":
            const diceware_turkish = require('./lists/diceware_turkish');
            wordlist = diceware_turkish.wordlist;
            break;
        default:
            console.log("Unknown language: " + lang);
            process.exit(1);
    }
    var assoc_arr = {};
    var entropy = get_entropy();
    var len = Math.ceil(entropy/Math.log2(wordlist.length));
    var pass = generate_pass(len, wordlist, true);
    if ((args.indexOf("--hyphenate") != -1) || (args.indexOf("-H")) != -1) {
        pass = pass.split(" ").join("-");
    }
    assoc_arr["Generator"] = "Diceware";
    assoc_arr["Wordlist"] = lang;
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = pass.replace(/\s/g, '').length;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(wordlist.length));
    return assoc_arr;
}

function generate_eff() {
    if (args.indexOf("--eff") != -1) {
        var eff_set = args[args.indexOf("--eff") + 1];
    }
    else if (args.indexOf("-e") != -1) {
        var eff_set = args[args.indexOf("-e") + 1];
    }
    else {
        var eff_set = "Short";
    }
    var wordlist = [];
    switch(eff_set) {
        case "Distant":
        case "distant":
            const eff_distant = require('./lists/eff_distant');
            wordlist = eff_distant.eff_distant;
            break;
        case "Long":
        case "long":
            const eff_long = require('./lists/eff_long');
            wordlist = eff_long.eff_long;
            break;
        case "Potter":
        case "potter":
            const eff_harrypotter = require('./lists/eff_harrypotter');
            wordlist = eff_harrypotter.eff_harrypotter;
            break;
        case "Short":
        case "short":
            const eff_short = require('./lists/eff_short');
            wordlist = eff_short.eff_short;
            break;
        case "Thrones":
        case "thrones":
            const eff_gameofthrones = require('./lists/eff_gameofthrones');
            wordlist = eff_gameofthrones.eff_gameofthrones;
            break;
        case "Trek":
        case "trek":
            const eff_startrek = require('./lists/eff_startrek');
            wordlist = eff_startrek.eff_startrek;
            break;
        case "Wars":
        case "wars":
            const eff_starwars = require('./lists/eff_starwars');
            wordlist = eff_starwars.eff_starwars;
            break;
        default:
            console.log("Unknown wordlist: " + eff_set);
            process.exit();
    }
    var assoc_arr = {};
    var entropy = get_entropy();
    var len = Math.ceil(entropy/Math.log2(wordlist.length));
    var pass = generate_pass(len, wordlist, true);
    if ((args.indexOf("--hyphenate") != -1) || (args.indexOf("-H")) != -1) {
        pass = pass.split(" ").join("-");
    }
    assoc_arr["Generator"] = "EFF";
    assoc_arr["Wordlist"] = eff_set;
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = pass.replace(/\s/g, '').length;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(wordlist.length));
    return assoc_arr;
}

function generate_alternate() {
    if (args.indexOf("--alternate") != -1) {
        var alt_set = args[args.indexOf("--alternate") + 1];
    }
    else if (args.indexOf("-a") !=-1) {
        var alt_set = args[args.indexOf("-a") + 1];
    }
    else {
        var alt_set = "Trump";
    }
    var wordlist = [];
    switch(alt_set) {
        case "Colors":
        case "colors":
            const colors_wordlist = require('./lists/alternate_colors');
            wordlist = colors_wordlist.wordlist;
            break;
        case "Elvish":
        case "elvish":
            const elvish_wordlist = require('./lists/alternate_elvish');
            wordlist = elvish_wordlist.wordlist;
            break;
        case "Klingon":
        case "klingon":
            const klingon_wordlist = require('./lists/alternate_klingon');
            wordlist = klingon_wordlist.wordlist;
            break;
        case "PGP":
        case "Pgp":
        case "pgp":
            const pgp_wordlist = require('./lists/alternate_pgp');
            wordlist = pgp_wordlist.wordlist;
            break;
        case "Rockyou":
        case "RockYou":
        case "rockyou":
            const rockyou_wordlist = require('./lists/alternate_rockyou');
            wordlist = rockyou_wordlist.wordlist;
            break;
        case "Simpsons":
        case "simpsons":
            const simpsons_wordlist = require('./lists/alternate_simpsons');
            wordlist = simpsons_wordlist.wordlist;
            break;
        case "Trump":
        case "trump":
            const trump_wordlist = require('./lists/alternate_trump');
            wordlist = trump_wordlist.wordlist;
            break;
        default:
            console.log("Unknown wordlist: " + alt_set);
            process.exit(1);
    }
    var assoc_arr = {};
    var entropy = get_entropy();
    var len = Math.ceil(entropy/Math.log2(wordlist.length));
    var pass = generate_pass(len, wordlist, true);
    if ((args.indexOf("--hyphenate") != -1) || (args.indexOf("-H")) != -1) {
        pass = pass.split(" ").join("-");
    }
    assoc_arr["Generator"] = "Alternate";
    assoc_arr["Wordlist"] = alt_set;
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = pass.replace(/\s/g, '').length;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(wordlist.length));
    return assoc_arr;
}

function generate_bitcoin() {
    if (args.indexOf("--bitcoin") != -1) {
        var lang = args[args.indexOf("--bitcoin") + 1];
    }
    else if (args.indexOf("-b") != -1) {
        var lang = args[args.indexOf("-b") + 1];
    }
    else {
        var lang = "English";
    }
    var wordlist = [];
    switch(lang) {
        case "Chinese":
        case "chinese":
            if ((args.indexOf("--traditional")) != -1 || (args.indexOf("-t")) != -1) {
                const bitcoin_cn_trad = require('./lists/bitcoin_cn_trad');
                wordlist = bitcoin_cn_trad.wordlist;
            }
            else {
                const bitcoin_cn_simp = require('./lists/bitcoin_cn_simp');
                wordlist = bitcoin_cn_simp.wordlist;
            }
            break;
        case "English":
        case "english":
            const english_wordlist = require('./lists/bitcoin_en');
            wordlist = english_wordlist.wordlist;
            break;
        case "French":
        case "french":
            const french_wordlist = require('./lists/bitcoin_fr');
            wordlist = french_wordlist.wordlist;
            break;
        case "Italian":
        case "italian":
            const italian_wordlist = require('./lists/bitcoin_it');
            wordlist = italian_wordlist.wordlist;
            break;
        case "Japanese":
        case "japanese":
            const japanese_wordlist = require('./lists/bitcoin_jp');
            wordlist = japanese_wordlist.wordlist;
            break;
        case "Korean":
        case "korean":
            const korean_wordlist = require('./lists/bitcoin_kr');
            wordlist = korean_wordlist.wordlist;
            break;
        case "Spanish":
        case "spanish":
            const spanish_wordlist = require('./lists/bitcoin_es');
            wordlist = spanish_wordlist.wordlist;
            break;
        default:
            console.log("Unknown language: " + lang);
            process.exit(1);
    }
    var assoc_arr = {};
    var entropy = get_entropy();
    var len = Math.ceil(entropy/Math.log2(wordlist.length));
    var pass = generate_pass(len, wordlist, true);
    if ((args.indexOf("--hyphenate") != -1) || (args.indexOf("-H")) != -1) {
        pass = pass.split(" ").join("-");
    }
    assoc_arr["Generator"] = "Bitcoin";
    assoc_arr["Wordlist"] = lang;
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = pass.replace(/\s/g, '').length;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(wordlist.length));
    return assoc_arr;
}

function generate_sys_pass() {
    var dict = fs.readFileSync("/usr/share/dict/words").toString();
    var wordlist = dict.split('\n');
    var assoc_arr = {};
    var entropy = get_entropy();
    var len = Math.ceil(entropy/Math.log2(wordlist.length));
    var pass = generate_pass(len, wordlist, true);
    if ((args.indexOf("--hyphenate") != -1) || (args.indexOf("-H")) != -1) {
        pass = pass.split(" ").join("-");
    }
    assoc_arr["Generator"] = "System";
    assoc_arr["Wordlist"] = "/usr/share/dict/words";
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = pass.replace(/\s/g, '').length;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(wordlist.length));
    return assoc_arr;
}

function generate_apple() {
    function _apple(n) {
        /*
            See the Twitter thread at https://twitter.com/AaronToponce/status/1131406726069084160 for full analysis.

            For n ≥ 1 blocks, the entropy in bits per block is:
                log2(
                    (6n-1) *    //  One lowercase alphabetic character is randomly capitalized
                    19^(4n-1) * //  The total possible combinations of consonants
                    6^(2n) *    //  The total possible combinations of vowels
                    10 * 2n     //  An "edge" character is a random digit
                )

            E.G.:
                DVccvc:                      log2( 5 * 19^3  * 6^2 * 10 * 2) ~=  24.558 bits
                cvCcvD-cvccvc:               log2(11 * 19^7  * 6^4 * 10 * 4) ~=  48.857 bits
                cvcCvc-Dvccvc-cvccvc:        log2(17 * 19^11 * 6^6 * 10 * 6) ~=  72.231 bits
                cvccVc-cvccvD-cvccvc-cvccvc: log2(23 * 19^15 * 6^8 * 10 * 8) ~=  95.244 bits
                et cetera, et cetera, et cetera.
        */
        return Math.floor(Math.log2((6*n-1)*19**(4*n-1)*6**(2*n)*20*n));
    }

    var pass = [];
    var digits = "0123456789";
    var vowels = "aeiouy";
    var consonants = "bcdfghjkmnpqrstvwxz";
    var entropy = get_entropy();
    var v_ent = Math.log2(vowels.length);
    var c_ent = Math.log2(consonants.length);

    var n = 1; // number of blocks
    while (_apple(n) <= entropy) { n++; };
    for (let i = 0; i < n; i++) {
        pass[6*i]   = generate_pass(1, consonants);
        pass[6*i+1] = generate_pass(1, vowels);
        pass[6*i+2] = generate_pass(1, consonants);
        pass[6*i+3] = generate_pass(1, consonants);
        pass[6*i+4] = generate_pass(1, vowels);
        pass[6*i+5] = generate_pass(1, consonants);
    }

    var d_loc = 0;
    var c_loc = 0;
    var edge = sec_rand(2*n); // [0, 2n)
    var digit = generate_pass(1, digits);

    if (edge % 2 == 0) { d_loc = 3*edge; }
    else { d_loc = 3*edge+2; }
    pass[d_loc] = digit;

    do { c_loc = sec_rand(pass.length); } while (c_loc == d_loc);
    pass[c_loc] = pass[c_loc].toUpperCase();

    for (let i = n-1; i > 0; i-- ) {
        pass.splice(6*i, 0, "-");
    }

    return [pass.join(""), pass.length, _apple(n)];
}

function generate_ninja() {
    var ninja = ['ka','zu','mi','te','ku','lu','ji','ri','ki','zu','me','ta','rin','to','mo','no','ke','shi','ari','chi','do','ru','mei','na','fu','zi'];
    var entropy = get_entropy();
    var len = Math.ceil(entropy/Math.log2(ninja.length));
    var pass = "";
    
    for (i=0; i<len; i++) {
        pass += ninja[sec_rand(len)];
        if (i%3 == 2 && i != len-1) {
            pass += "-";
        }
    }
    return [pass, ninja.length, Math.floor(len*Math.log2(ninja.length))];
}

function generate_kpop() {
    // 64 unique words = 6 bits of entropy per word
    var kpop = ['A','Ah','Bae','Bin','Bo','Choi','Chul','Da','Do','Dong','Eun','Gi','Gun','Ha','Hae','Hee','Ho','Hu','Hwa','Hwan','Hye','Hyo','Hyun','Il','In','Ja','Jae','Ji','Jin','Jong','Joo','Joon','Ju','Jun','Jung','Ki','Kun','Kyu','Lee','Mi','Min','Moon','Nam','Ok','Park','Rin','Seo','Seul','Shi','Sik','So','Song','Soo','Su','Sun','Sung','Won','Woo','Ye','Yeon','Yoo','Yu','Yul','Yun'];
    var entropy = get_entropy();
    var len = Math.ceil(entropy/Math.log2(kpop.length));
    var pass = "";
    
    for (i=0; i<len; i++) {
        pass += kpop[sec_rand(len)];
        if (i%2 == 1 && i != len-1) {
            pass += "-";
        }
    }
    return [pass, kpop.length, Math.floor(len*Math.log2(kpop.length))];
}

function generate_babble() {
    var pass = [];
    var vowels = "aeiouy";
    var consonants = "bcdfghklmnprstvzx";
    var v_ent = Math.log2(vowels.length);
    var c_ent = Math.log2(consonants.length);
    var out_ent = (2*c_ent)+(2*v_ent);
    var in_ent = (3*c_ent)+(2*v_ent);
    var entropy = get_entropy();
    entropy = entropy - (2*out_ent);
    var len = Math.ceil(entropy/in_ent);
    var tot_ent = out_ent + (len*in_ent) + out_ent;
    for (var i=0; i<len+2; i++) {
        for (var j=0; j<5; j++) {
            if (j % 2 == 0) {
                pass[(5*i)+j] = generate_pass(1, consonants);
            }
            else {
                pass[(5*i)+j] = generate_pass(1, vowels);
            }
        }
    }
    pass[0] = "x";
    pass[pass.length-1] = "x";
    for (var i=pass.length; i>0; i-=5) {
        pass.splice(i, 0, "-");
    }
    pass.pop() // strip last "-"
    return [pass.join(""), (len+2)*5, Math.floor(tot_ent)];
}

function generate_pseudowords() {
    if ((args.indexOf("--bubble") != -1) || (args.indexOf("-B")) != -1) {
        var pw_type = "Bubble_Babble";
    }
    else if ((args.indexOf("--ninja") != -1) || (args.indexOf("-n")) != -1) {
        var pw_type = "Secret_Ninja";
    }
    else if ((args.indexOf("--kpop") != -1) || (args.indexOf("-k")) != -1) {
        var pw_type = "Korean_K-pop";
    }
    else {
        var pw_type = "Apple_Inc";
    }
    if (pw_type == "Apple_Inc") {
        var ret = generate_apple();
    }
    else if (pw_type == "Secret_Ninja") {
        var ret = generate_ninja();
    }
    else if (pw_type == "Korean_K-pop") {
        var ret = generate_kpop();
    }
    else {
        var ret = generate_babble();
    }
    var assoc_arr = {};
    var pass = ret[0];
    var len = ret[1];
    var ent = ret[2];
    assoc_arr["Generator"] = "Pseudowords";
    assoc_arr["Wordlist"] = pw_type;
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = len;
    assoc_arr["Entropy"] = ent;
    return assoc_arr;
}

function generate_set(b, rand_set) {
    rand_set = typeof rand_set !== 'undefined' ? rand_set : true;
    var entropy = get_entropy();
    var assoc_arr = {};
    var ident = '';
    var s = '';
    switch(b) {
        case 256:
            if ((args.indexOf("--braille") != -1) || (args.indexOf("-B") != -1)){
                s = "⠀⠁⠂⠃⠄⠅⠆⠇⠈⠉⠊⠋⠌⠍⠎⠏⠐⠑⠒⠓⠔⠕⠖⠗⠘⠙⠚⠛⠜⠝⠞⠟⠠⠡⠢⠣⠤⠥⠦⠧⠨⠩⠪⠫⠬⠭⠮⠯⠰⠱⠲⠳⠴⠵⠶⠷⠸⠹⠺⠻⠼⠽⠾⠿";
                s+= "⡀⡁⡂⡃⡄⡅⡆⡇⡈⡉⡊⡋⡌⡍⡎⡏⡐⡑⡒⡓⡔⡕⡖⡗⡘⡙⡚⡛⡜⡝⡞⡟⡠⡡⡢⡣⡤⡥⡦⡧⡨⡩⡪⡫⡬⡭⡮⡯⡰⡱⡲⡳⡴⡵⡶⡷⡸⡹⡺⡻⡼⡽⡾⡿";
                s+= "⢀⢁⢂⢃⢄⢅⢆⢇⢈⢉⢊⢋⢌⢍⢎⢏⢐⢑⢒⢓⢔⢕⢖⢗⢘⢙⢚⢛⢜⢝⢞⢟⢠⢡⢢⢣⢤⢥⢦⢧⢨⢩⢪⢫⢬⢭⢮⢯⢰⢱⢲⢳⢴⢵⢶⢷⢸⢹⢺⢻⢼⢽⢾⢿";
                s+= "⣀⣁⣂⣃⣄⣅⣆⣇⣈⣉⣊⣋⣌⣍⣎⣏⣐⣑⣒⣓⣔⣕⣖⣗⣘⣙⣚⣛⣜⣝⣞⣟⣠⣡⣢⣣⣤⣥⣦⣧⣨⣩⣪⣫⣬⣭⣮⣯⣰⣱⣲⣳⣴⣵⣶⣷⣸⣹⣺⣻⣼⣽⣾⣿";
                ident = "Base256 (Braille)";
            }
            else {
                s = "ḀḁḂḃḄḅḆḇḈḉḊḋḌḍḎḏḐḑḒḓḔḕḖḗḘḙḚḛḜḝḞḟḠḡḢḣḤḥḦḧḨḩḪḫḬḭḮḯḰḱḲḳḴḵḶḷḸḹḺḻḼḽḾḿ";
                s+= "ṀṁṂṃṄṅṆṇṈṉṊṋṌṍṎṏṐṑṒṓṔṕṖṗṘṙṚṛṜṝṞṟṠṡṢṣṤṥṦṧṨṩṪṫṬṭṮṯṰṱṲṳṴṵṶṷṸṹṺṻṼṽṾṿ";
                s+= "ẀẁẂẃẄẅẆẇẈẉẊẋẌẍẎẏẐẑẒẓẔẕẖẗẘẙẚẛẜẝẞẟẠạẢảẤấẦầẨẩẪẫẬậẮắẰằẲẳẴẵẶặẸẹẺẻẼẽẾế";
                s+= "ỀềỂểỄễỆệỈỉỊịỌọỎỏỐốỒồỔổỖỗỘộỚớỜờỞởỠỡỢợỤụỦủỨứỪừỬửỮữỰựỲỳỴỵỶỷỸỹỺỻỼỽỾỿ";
                ident = "Base256";
            }
            break;
        case 188:
            for (i=0; i<94; i++) s += String.fromCharCode(33+i);
            for (i=0; i<95; i++) s += String.fromCharCode(161+i);
            s = s.replace(String.fromCharCode(173),''); // soft-hyphen isn't graphical
            ident = "Base188";
            break;
        case 94:
            for (i=0; i<94; i++) { s += String.fromCharCode(33+i); }
            ident = "Base94";
            break;
        case 85:
            s = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!#$%&()*+-;<=>?@^_`{|}~";
            ident = "Base85";
            break;
        case 64:
            s = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
	    if ((args.indexOf("--url-safe") != -1) || (args.indexOf("-u") != -1)) {
                s += "-_";
                ident = "Base64 (URL-safe)";
	    }
            else {
                s += "+/";
                ident = "Base64";
            }
            break;
        case 62:
            s = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            ident = "Base62";
            break;
        case 58:
            s = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
            ident = "Base58 (Bitcoin)";
            break;
        case 52:
            s = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            ident = "Base52";
            break;
        case 36:
            s = "0123456789abcdefghijklmnopqrstuvwxyz";
            ident = "Base36";
            break;
        case 32:
            s = "0123456789abcdefghjkmnpqrstvwxyz";
            ident = "Base32";
            break;
        case 26:
            s = "abcdefghjkmnpqrstvwxyz";
            ident = "Base26";
            break;
        case 16:
            s = "0123456789abcdef";
            ident = "Base16";
            break;
        case 10:
            s = "0123456789";
            ident = "Base10";
            break;
        case 8:
            s = "01234567";
            ident = "Base8";
            break;
        case 4:
            s = "ACGT";
            ident = "DNA";
            break;
        case 2:
            if ((rand_set == "Coins") || (rand_set == "coins")) {
                s = "HT";
                ident = "Coin flips";
            }
            else {
                s = "01";
                ident = "Base2";
            }
            break;
    }

    var len = Math.ceil(entropy/Math.log2(s.length));
    var pass = generate_pass(len, s);
    assoc_arr["Generator"] = "Random";
    assoc_arr["Wordlist"] = ident;
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = len;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(s.length));
    return assoc_arr;
}

function generate_random() {
    var s = "";
    if (args.indexOf("--random") != -1) {
        var rand_set = args[args.indexOf("--random") + 1];
    }
    else if (args.indexOf("-r") != -1) {
        var rand_set = args[args.indexOf("-r") + 1];
    }
    else {
        var rand_set = "Base94";
    }
    switch(rand_set) {
        case "Base256":
        case "base256":
        case "256":
            s = generate_set(256);
            break;
        case "Base188":
        case "base188":
        case "188":
            s = generate_set(188);
            break;
        case "Base94":
        case "base94":
        case "94":
            s = generate_set(94);
            break;
        case "Base85":
        case "base85":
        case "85":
            s = generate_set(85);
            break;
        case "Base64":
        case "base64":
        case "64":
            s = generate_set(64);
            break;
        case "Base62":
        case "base62":
        case "62":
            s = generate_set(62);
            break;
        case "Base58":
        case "base58":
        case "58":
            s = generate_set(58);
            break;
        case "Base52":
        case "base52":
        case "52":
            s = generate_set(52);
            break;
        case "Base36":
        case "base36":
        case "36":
            s = generate_set(36);
            break;
        case "Base32":
        case "base32":
        case "32":
            s = generate_set(32);
            break;
        case "Base26":
        case "base26":
        case "26":
            s = generate_set(26);
            break;
        case "Base16":
        case "base16":
        case "16":
            s = generate_set(16);
            break;
        case "Base10":
        case "base10":
        case "10":
            s = generate_set(10);
            break;
        case "Base8":
        case "base8":
        case "8":
            s = generate_set(8);
            break;
        case "Base2":
        case "base2":
        case "Coins":
        case "coins":
        case "2":
            s = generate_set(2, rand_set);
            break;
        case "DNA":
        case "dna":
            s = generate_set(4);
            break;
        case "Emoji":
        case "emoji":
            s = generate_emoji();
            break;
        default:
            console.log("Unknown set: " + rand_set);
            process.exit(1);
    }
    return s;
}

function generate_emoji() {
    const emoji_wordlist = require('./lists/random_emoji');
    var wordlist = emoji_wordlist.wordlist;
    var entropy = get_entropy();
    var assoc_arr = {};
    var len = Math.ceil(entropy/Math.log2(wordlist.length));
    var pass = generate_pass(len, wordlist, true);
    pass = pass.replace(/ /g,"");
    assoc_arr["Generator"] = "Random";
    assoc_arr["Wordlist"] = "Emoji";
    assoc_arr["Password"] = pass;
    assoc_arr["Characters"] = len;
    assoc_arr["Entropy"] = Math.floor(len * Math.log2(wordlist.length));
    return assoc_arr;
}

if ((args.indexOf("--help") != -1) || (args.indexOf("-h")) != -1) {
    print_usage();
}

if (args.indexOf("--only") != -1) {
    var generator = args[args.indexOf("--only") + 1];
}
else if (args.indexOf("-o") != -1) {
    var generator = args[args.indexOf("-o") + 1];
}
if (generator !== undefined && generator !== null) {
    switch(generator) {
        case "Alternate":
        case "alternate":
            results.push(generate_alternate());
            break;
        case "Bitcoin":
        case "bitcoin":
            results.push(generate_bitcoin());
            break;
        case "Diceware":
        case "diceware":
            results.push(generate_diceware());
            break;
        case "EFF":
        case "Eff":
        case "eff":
            results.push(generate_eff());
            break;
        case "System":
        case "system":
            results.push(generate_sys_pass());
            break;
        case "Pseudowords":
        case "pseudowords":
        case "Pseudoword":
        case "pseudoword":
        case "Pseudo":
        case "pseudo":
            results.push(generate_pseudowords());
            break;
        case "Random":
        case "random":
            results.push(generate_random());
            break;
        default:
            console.log("Unknown generator: " + args[args.indexOf("--only") + 1])
            process.exit(1);
    }
}
else {
    results.push(generate_alternate());
    results.push(generate_bitcoin());
    results.push(generate_diceware());
    results.push(generate_eff());
    if ((args.indexOf("--system") != -1) || (args.indexOf("-s") != -1)) {
        results.push(generate_sys_pass());
    }
    results.push(generate_pseudowords());
    results.push(generate_random());
}

if ((args.indexOf("--json") != -1) || (args.indexOf("-j")) != -1) {
    var json_ret = JSON.stringify(results, null, 2);
    console.log(json_ret);
}
else {
    for (var i=0; i<results.length; i++) {
        console.log(results[i].Generator + "(" + results[i].Wordlist + "): " + results[i].Password);
    }
}
